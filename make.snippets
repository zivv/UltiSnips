snippet tar "packge to .tar.gz" b
dist: $(DIST)
	tar -zcf dist.tar.gz $(DIST)
endsnippet

snippet clean "clean part" b
clean:
	-rm $(filter-out $(ALL_SRC), $(shell find * -type f))
endsnippet

snippet cc "gcc configures" b
CC = gcc
CFLAGS = -Wall -Werror
INCLUDES = ${1: # eg. -I include}
LIBS = ${2: # eg. -L lib}
LDFLAGS = ${3: # eg. -l lxxx}
endsnippet

snippet src "cc srcs & objs" b
SRC_DIRS = .
BUILD_PATH = build

SRCS = $(filter-out %_test.$1, $(foreach d, $(SRC_DIRS), $(wildcard $(d)/*.$1)))
OBJS = $(SRCS:%.$1=$(BUILD_PATH)/%.o)
$(BUILD_PATH)/%.o: %.${1:cpp}
	@mkdir -p $(@D)
	$(CC) -c $< $(CFLAGS) $(INCLUDES) $(LIBS) $(LDFLAGS) -o $@
endsnippet

snippet info "info part" b
info:
	@echo "SRCS:\t$(SRCS)"
	@echo "OBJS:\t$(OBJS)"
	@echo "DIST:\t$(DIST)\n"
endsnippet

snippet tgt "generate a target from .cpp/.cc"
${1:test}: ${2:test.cpp} $(OBJS)
	$(CC) $^ $(CFLAGS) $(INCLUDES) $(LIBS) $(LDFLAGS) -o $1
endsnippet

snippet pyc "wrap c srcs to py module"
# wrap c srcs to py module - $(PY_MODULE).so
PY_BUILD_PATH = py_build  # TODO(ziv): confirm build path
PY_MODULE = ${1}
PY_WRAPPER = py_wrapper.cc  # TODO(ziv): confirm wrapper name
PY_FLAGS = -I /usr/include/python2.7 -I /usr/lib/python2.7/config  # TODO(ziv): confirm flags
CPP_FPIC_OBJS = $(patsubst %.cpp, $(PY_BUILD_PATH)/%.o, $(CPP_SRCS))  # TODO(ziv): confirm c srcs
PYWRAPPER_OBJS = $(patsubst %.cc, $(PY_BUILD_PATH)/%.o, $(PYWRAPPER))  # TODO(ziv): confirm wrapper suffix
py_build: $(CPP_FPIC_OBJS) $(PY_WRAPPER_OBJ)
	$(CC) -shared -o $(PY_MODULE).so $^
$(CPP_FPIC_OBJS): $(PY_BUILD_PATH)/%.o: %.cpp  # TODO(ziv): confirm c srcs suffix
	$(CC) -c $(CFLAGS) $(INCLUDES) $(LIBS) $(LDFLAGS) $< -o $@ -fpic
$(PY_WRAPPER_OBJ): $(PY_BUILD_PATH)/%.o: %.cc  # TODO(ziv): confirm wrapper srcs suffix
	$(CC) -c $(CFLAGS) $(INCLUDES) $(LIBS) $(LDFLAGS) $< -o $@ -fpic $(PY_FLAGS)
endsnippet

snippet asm "asm"
ASM_TARGET = ${1}
ASM_SRCS = $(wildcard *.s)
ASM_OBJS = $(ASM_SRCS:%.s=%.o)
$(ASM_TARGET): $(ASM_OBJS)
	ld $(ASM_OBJS) -o $(ASM_TARGET)
%.o: %.s
	as $< -o $@
endsnippet
