snippet #! "#!/usr/bin/env python3"
#!/usr/bin/env python3
endsnippet

snippet utf8 "# -*- coding: utf-8 -*-"
# -*- coding: utf-8 -*-
endsnippet

snippet i "import" b
import 
endsnippet

snippet fr "from ... import ..." b
from ${1} import ${2:*}
endsnippet

snippet flags "from absl import flags" b
from absl import flags
endsnippet

snippet if "if ...:"
if ${1}:
endsnippet

snippet ei "elif ...:"
elif ${1}:
endsnippet

snippet el "else:"
else:
endsnippet

snippet wh "while ...:"
while ${1}:
endsnippet

snippet for "for ... in ...:"
for ${1} in ${2}:
endsnippet

snippet def "def ...(...):"
def ${1}(${2:`!v indent('.') ? 'self' : ''`}):
endsnippet

snippet cl "class ...(...):"
class ${1}(${2}):
endsnippet

snippet try "try: ... | except Exception as e:"
try:
	${1}
except ${2:Exception as e}:
endsnippet

snippet or "open(...)"
open(${1})
endsnippet

snippet ow "open(..., 'w')"
open(${1}, 'w')
endsnippet

snippet wi "with ... as ...:"
with ${1} as ${2}:
endsnippet

snippet wr "with open(...) as ifile:"
with open(${1}) as ${2:ifile}:
endsnippet

snippet ww "with open(..., 'w') as ofile:"
with open(${1}, 'w') as ${2:ofile}:
endsnippet

snippet br "break"
break
endsnippet

snippet pr "print()"
print(${VISUAL}${1})
endsnippet

snippet walk "for dirpath, dir, files in os.walk(...)"
for dirpath, dirs, files in os.walk(${1}):
endsnippet

snippet ev "eval(...)"
eval(${VISUAL}${1})
endsnippet

snippet ret "return"
return 
endsnippet

snippet en "enumerate(...)"
enumerate(${VISUAL}${1})
endsnippet

snippet gl "global"
global 
endsnippet

snippet re "repr(...)"
repr(${VISUAL}${0})
endsnippet

snippet li "logging.info(...)" b
logging.info(${VISUAL}${0})
endsnippet

snippet ld "logging.debug(...)" b
logging.debug(${VISUAL}${0})
endsnippet

snippet le "logging.error(...)" b
logging.error(${VISUAL}${0})
endsnippet

snippet log "logging configuration" b
logging.addLevelName(logging.DEBUG,    'DEBG')
logging.addLevelName(logging.WARN,     'WARN')
logging.addLevelName(logging.ERROR,    'ERRO')
logging.addLevelName(logging.CRITICAL, 'CRIT')
logging.basicConfig(format='%(asctime)s %(levelname)s %(message)s',
                    level=logging.${1:DEBUG})
endsnippet

snippet ''f "'...'.format(...)" i
'${VISUAL}${1}'.format(${2})
endsnippet

snippet ap "argparse.ArgumentParser(...)" b
parser = argparse.ArgumentParser(
	description='${1}',
)
args = parser.parse_args()
endsnippet

snippet paa "parser.add_argument(...)" b
${1:parser}.add_argument(
	'${2}',
	type=${3:str},
	help='${4}'${5},
)
endsnippet

snippet main "def _main(): ... if __name__ == '__main__': ..." b
import logging

def _main() -> bool:
	${VISUAL}${0}

if __name__ == '__main__':
	try:
		sys.exit(0 if _main() else 1)
	except:
		logging.exception('Failed with exception')
		raise
endsnippet

snippet init "init flags & logging" b
flags.mark_flags_as_required([])

try:
	flags.FLAGS(sys.argv)
except flags.Error as error:
	print('Failed to parse gflags: {}'.format(error), file=sys.stderr)
	return False

logging.basicConfig(
	format='%(levelname)s %(asctime)s %(thread)d %(filename)s:%(lineno)d] %(message)s',
	datefmt='%m%d %H:%M:%S %Z',
	filename=flags.FLAGS.log_file,
	level=logging.DEBUG)
return True
endsnippet

snippet Ds "flags.DEFINE_string(...)" b
flags.DEFINE_string('${1}', ${2:None}, '${3}')
endsnippet

snippet Db "flags.DEFINE_bool(...)" b
flags.DEFINE_bool('${1}', ${2:True}, '${3}')
endsnippet

snippet F "flags.FLAGS." i
flags.FLAGS.
endsnippet
