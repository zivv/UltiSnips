# Check following file:
#   $HOME/.vim/bundle/vim-snippets/UltiSnips/c.snippets
#   $HOME/.vim/bundle/vim-snippets/UltiSnips/cpp.snippets
#   ./c.snippets
#   ./cpp_google.snippets
#   ./cpp_clang.snippets

snippet si "size_t" i
size_t 
endsnippet

snippet u64 "uint64" i
uint64 
endsnippet

snippet vec "std::vector" i
std::vector<${1}>
endsnippet

snippet str "std::string" i
std::string
endsnippet

snippet up "std::unique_ptr<...>" i
std::unique_ptr<${VISUAL}${1}>
endsnippet

snippet mu "std::make_unique<...>" i
std::make_unique<${VISUAL}${1}>
endsnippet

snippet sp "std::shared_ptr<...>" i
std::shared_ptr<${VISUAL}${1}>
endsnippet

snippet ms "std::make_shared<...>" i
std::make_shared<${VISUAL}${1}>
endsnippet

snippet sc "static_cast<...>(${VISUAL})" i
static_cast<${1:int}>(${VISUAL}${2})
endsnippet

snippet main "int main(int argc, char** argv) {...}" b
int main(int argc, char** argv) {
	${VISUAL}${0}
	return 0;
}
endsnippet

snippet puts "puts(...);" b
puts(${1});
endsnippet

snippet fin "FILE* fin = fopen(..., 'r');" b
FILE* ${1:fin} = fopen(${2}, "${3:r}");
endsnippet

snippet fout "FILE* fout = fopen(..., 'w');" b
FILE* ${1:fout} = fopen(${2}, "${3:w}");
endsnippet

snippet fcl "fclose(...);" b
fclose(${1:fin});
endsnippet

snippet ifd "#ifndef XX | #define XX | #endif // XX" b
#ifndef ${1:${VISUAL}}
#define $1
#endif  // $1${0}
endsnippet

snippet ns "namespace"
namespace ${1:`!p snip.rv = snip.basename`}${1/(.+)/ /}{
${VISUAL}${0}
}  // namespace${1/(.+)/ /}$1
endsnippet

snippet ct "std::cout << ... << std::endl;"
std::cout << ${0} << std::endl;
endsnippet

snippet forr "for (auto iter : ...) {...}"
for (${1:auto} ${2:iter} : ${3}) {
	${VISUAL}${0}
}
endsnippet

snippet forc "for (const auto& iter : ...) {...}"
for (const auto& ${1:iter} : ${2}) {
	${VISUAL}${0}
}
endsnippet

snippet forb "for (auto iter = XX.begin(); iter < XX.end(); ++iter) {...}"
for (${1:auto} ${2:iter} = ${3}.begin(); $2 < $3.end(); ++$2) {
	${VISUAL}${0}
}
endsnippet

snippet mv "std::move(...)" i
std::move(${VISUAL}${1})
endsnippet

snippet inf "std::numeric_limits<double>::infinity()" i
std::numeric_limits<${1:double}>::infinity()
endsnippet

snippet eps "std::numeric_limits<T>::epsilon()" i
std::numeric_limits<${1:double}>::epsilon()
endsnippet

snippet lk "std::unique_lock<std::mutex> lk(mutex);"
std::unique_lock<std::mutex> lk(${1:mutex_});
endsnippet

##### random

snippet inr "#include <random>" b
#include <random>
endsnippet

# Pseudo-random number generator.
snippet prng "std::mt19937 prng = std::mt19937(Year)" b
std::mt19937 ${1:prng} = std::mt19937(${2:`date +%Y`})
endsnippet

snippet urd "std::uniform_real_distribution<T>" i
std::uniform_real_distribution<${1:double}>
endsnippet
